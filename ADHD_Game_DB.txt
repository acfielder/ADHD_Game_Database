
-- games themselves

create table executivefunctions (
	id int not null auto_increment,
	name varchar(60) not null,
	primary key(id)
);

create table minigames (
	id int not null auto_increment,
	name varchar(60) not null,
	primary key(id)
);

create table trainingEFs (
	efid int not null,
	mgid int not null,
	primary key(mgid, efid),
	foreign key (efid) references executivefunctions(id),
	foreign key (mgid) references minigames(id)
);


-- participants to professionals

create table participants (
	id int not null auto_increment,
	name varchar(60) not null,
	address varchar(120) not null,
	age int not null,
	diagnosis boolean not null,
	primary key(id)
);

CREATE INDEX idx_participants_name ON participants (name);

create table patientEFfocus (
	parid int not null,
	efid int not null,
	primary key (parid, efid),
	foreign key (parid) references participants(id),
	foreign key (efid) references executivefunctions(id)
);

create table professional (
	id int not null auto_increment, 
	name varchar(60) not null,
	clinic varchar(60) not null,
	phonenumber varchar(20),
	primary key(id)
);

create table proTopatient (
	parid int not null,
	proid int not null,
	primary key(parid, proid),
	foreign key (parid) references participants (id),
	foreign key (proid) references professional (id)
);


-- CBTT

create table CBTTprogress (
	sessioncount int not null,
	parid int not null, 
	currentlevel int not null, 
	completedoflevel int not null,
	updated timestamp not null default current_timestamp,
	primary key(parid, sessioncount),
	foreign key (parid) references participants(id)
);

create table sequencetypes (
	id int not null auto_increment,
	name varchar(60) not null,
	primary key(id)
);

create table CBTTsessions (
	sessionnum int not null,
	parid int not null,
	sessionlength int not null,
	correctcount int not null, 
	longestsequence int not null,
	currentlevel int not null,
	whencompleted timestamp not null default current_timestamp,
	primary key(parid, sessionnum),
	foreign key(parid) references participants(id)
);

create table CBTTtrials (
	trialnum int not null,
	sessionnum int not null,
	parid int not null,
	stid int not null,
	sequencelength int not null,
	score int not null,
	whencompleted timestamp not null default current_timestamp,
	primary key(parid, sessionnum, trialnum),
	foreign key (parid, sessionnum) references CBTTsessions(parid, sessionnum),
	foreign key (stid) references sequencetypes(id)
);


-- StopGo

create table StopGoprogress (
	sessioncount int not null, 
	parid int not null,
	currentlevel int not null,
	completedoflevel int not null,
	updated timestamp not null default current_timestamp,
	primary key(parid, sessioncount),
	foreign key(parid) references participants (id)
);

create table StopGosessions (
	sessionnum int not null,
	parid int not null,
	sessionlength int not null,
	correctcount int not null, 
	currentlevel int not null,
	bestRT decimal(10,3) not null,
	avgGoRT decimal(10,3) not null,
	probsignalresponse decimal(10,3) not null,
	stopsignalRT decimal(10,3) not null,
	whencompleted timestamp not null default current_timestamp,
	primary key(parid, sessionnum),
	foreign key(parid) references participants (id)
);

create table stopgotrialtypes (
	id int not null auto_increment,
	name varchar(60) not null,
	primary key(id)
);

create table StopGotrials (
	trialnum int not null,
	sessionnum int not null,
	parid int not null,
	sgttid int not null,
	startinterval decimal(10,3) not null, 
	goRT decimal(10,3) not null, 
	stopRt decimal(10,3) not null,
	ifsuccessful boolean not null, -- boolean
	stopsignaldelaytime decimal(10,3) not null,
	direction boolean not null, -- boolean
	whencompleted timestamp not null default current_timestamp,
	primary key(parid, sessionnum, trialnum),
	foreign key (parid, sessionnum) references StopGosessions (parid, sessionnum),
	foreign key (sgttid) references stopgotrialtypes (id)
);


-- WCST

create table WCSTprogress (
	sessioncount int not null,
	parid int not null,
	currentlevel int,
	completedoflevel int, 
	updated timestamp not null default current_timestamp,
	primary key(parid, sessioncount),
	foreign key(parid) references participants (id)
);

create table WCSTruletypes (
	id int not null auto_increment,
	name varchar(60) not null,
	primary key(id)
);

create table WCSTtrialcards (
	id int not null auto_increment,
	feature1 varchar(60) not null,
	feature2 varchar(60) not null,
	feature3 varchar(60) not null,
	primary key(id)
);


create table WCSTsessions (
	sessionnum int not null, 
	parid int not null,
	phaselength int not null,
	card1 int not null,
	card2 int not null,
	card3 int not null,
	card4 int not null,
	p1accuracyrate decimal(10,3) not null,
	p1avgRT decimal(10,3) not null,
	p1adaptionrate decimal(10,3) not null,
	p2accuracyrate decimal(10,3) not null,
	p2avgRT decimal(10,3) not null,
	p2adaptionrate decimal(10,3) not null,
	bestRT decimal(10,3) not null,
	whencompleted timestamp not null default current_timestamp,
	primary key(parid, sessionnum),
	foreign key(parid) references participants (id), 
	foreign key (card1) references WCSTtrialcards (id),
	foreign key (card2) references WCSTtrialcards (id),
	foreign key (card3) references WCSTtrialcards (id),
	foreign key (card4) references WCSTtrialcards (id)
);

create table WCSTruleblocks (
	ruleblocknum int not null, 
	sessionnum int not null, 
	parid int not null,
	rid int not null,
	phase tinyint not null,
	blocklength int not null,
	adaptionrate decimal(10,3) not null,
	primary key(parid, sessionnum, ruleblocknum),
	foreign key(parid, sessionnum) references WCSTsessions (parid, sessionnum),
	foreign key(rid) references WCSTruletypes(id)
);


create table WCSTtrials (
	trialnum int not null,
	rnum int not null,
	parid int not null,
	sessionnum int not null,
	trialcardid int not null,
	ifsuccessful boolean not null,
	RT decimal(10,3) not null,
	whencompleted timestamp not null default current_timestamp,
	primary key(parid, sessionnum, trialnum),
	foreign key(parid, sessionnum, rnum) references WCSTruleblocks(parid, sessionnum, ruleblocknum),
	foreign key(parid, sessionnum) references WCSTsessions(parid, sessionnum),
	foreign key(trialcardid) references WCSTtrialcards(id)
);

/*

-- dummy data inserts 

insert into executivefunctions values 
 ('1','Working Memory'),
 ('2','Inhibition'),
 ('3','Cognitive Flexibility');

insert into minigames values
 ('1','Corsi Block Tapping Task'),
 ('2','Stop Go Task'),
 ('3','Wisconsin Card Sorting Task');

insert into trainingEFs values
 (1,1),
 (2,2),
 (3,3);

insert into participants values
(1,'Arabella','160 Mountain Spring',21,1),
(2,'Stephanie','52 Main Street',23,1),
(3,'Samara','19 Jefferson Ave',19,0),
(4,'Gregory','230 Shaffer Lane',20,0);

insert into patientEFfocus values
(1, 1),
(1, 3),
(2, 1),
(2, 2),
(3, 1),
(3, 2),
(3, 3),
(4, 1),
(4, 2),
(4, 3);

insert into professional values
(1, 'Mike Johnson','Johnson & Smith','6071234566'),
(2, 'Erin Smith','Johnson & Smith','6072344567');

insert into proTopatient values
(1, 1),
(1, 2),
(3, 2),
(2, 2),
(4, 1);

insert into CBTTprogress values
(4, 1, 2, 3, default),
(2, 2, 1, 3, default),
(1, 4, 1, 3, default);

-- this is the next one to run
insert into sequencetypes values
(1, 'Reversed Sequence'),
(2, 'Forward Sequence'),
(3, 'Manipulated Sequence'),
(4, 'Delayed Reversed Sequence'),
(5, 'Delayed Forward Sequence'),
(6, 'Delayed Manipulated Sequence');

insert into CBTTsessions values
(1, 1, 3, 1, 4, 1, default),
(2, 1, 3, 2, 5, 1, default),
(3, 1, 3, 2, 4, 2, default),
(4, 1, 3, 3, 5, 2, default),
(1, 2, 3, 1, 4, 1, default),
(2, 2, 3, 2, 5, 1, default),
(1, 4, 3, 3, 5, 1, default);

insert into CBTTtrials values
(1, 1, 1, 2, 4, 3, default),
(2, 1, 1, 1, 4, 3, default),
(3, 1, 1, 2, 3, 3, default),
(1, 2, 1, 2, 4, 4, default),
(2, 2, 1, 1, 4, 3, default),
(3, 2, 1, 2, 5, 5, default),
(1, 3, 1, 2, 4, 3, default),
(2, 3, 1, 1, 4, 4, default),
(3, 3, 1, 2, 3, 3, default),
(1, 4, 1, 1, 4, 4, default),
(2, 4, 1, 1, 5, 5, default),
(3, 4, 1, 2, 5, 5, default),
(1, 1, 2, 2, 4, 3, default),
(2, 1, 2, 1, 4, 3, default),
(3, 1, 2, 1, 3, 3, default),
(1, 2, 2, 2, 4, 4, default),
(2, 2, 2, 2, 5, 5, default),
(3, 2, 2, 1, 4, 3, default),
(1, 1, 4, 2, 4, 4, default),
(2, 1, 4, 1, 4, 4, default),
(3, 1, 4, 2, 5, 5, default);

insert into StopGoProgress values
(3, 4, 3, 3, default),
(1, 2, 1, 2, default),
(2, 3, 2, 2, default);

insert into StopGoSessions values
(1, 4, 3, 3, 1, 450, 600, 0.55, 750, default),
(2, 4, 3, 2, 2, 470, 620, 0.5, 780, default),
(3, 4, 3, 3, 2, 440, 590, 0.58, 760, default),
(1, 2, 3, 2, 1, 460, 610, 0.53, 770, default),
(1, 3, 3, 3, 1, 430, 630, 0.52, 790, default),
(2, 3, 3, 2, 2, 455, 615, 0.5, 800, default);

insert into stopgotrialtypes values
(1, 'Left Go'),
(2, 'Right Go'),
(3, 'Stop');

insert into StopGoTrials values
(1, 1, 4, 2, 4.2, 600, 750, 1, 400, 2, default),
(2, 1, 4, 3, 3.8, 620, 780, 1, 410, 0, default),
(3, 1, 4, 2, 5, 590, 740, 1, 390, 2, default),
(1, 2, 4, 3, 4.5, 610, 770, 1, 420, 0, default),
(2, 2, 4, 2, 4.3, 630, 790, 1, 430, 2, default),
(3, 2, 4, 3, 4.7, 620, 780, 1, 415, 0, default),
(1, 3, 4, 3, 4.1, 590, 740, 1, 400, 0, default),
(2, 3, 4, 1, 4.6, 580, 730, 1, 385, 1, default),
(3, 3, 4, 1, 4.4, 600, 760, 1, 410, 1, default),
(1, 1, 2, 3, 3.9, 610, 770, 1, 420, 0, default),
(2, 1, 2, 2, 4.2, 625, 780, 1, 430, 2, default),
(3, 1, 2, 3, 4.5, 640, 790, 0, 440, 0, default),
(1, 1, 3, 1, 3.8, 600, 760, 1, 405, 1, default),
(2, 1, 3, 3, 4, 590, 740, 1, 400, 0, default),
(3, 1, 3, 2, 4.3, 580, 730, 1, 390, 2, default),
(1, 2, 3, 2, 4.6, 625, 780, 0, 420, 2, default),
(2, 2, 3, 2, 4.4, 615, 770, 1, 415, 2, default),
(3, 2, 3, 3, 4.2, 630, 790, 1, 425, 0, default);

insert into WCSTprogress values
(2, 1, 1, 4, default),
(1, 4, 1, 3, default),
(2, 3, 2, 2, default);

insert into WCSTruletypes values
(1, 'Hats'),
(2, 'Glasses'),
(3, 'Clothes');

insert into WCSTTrialcards values
(1, 'beanie', 'shades', 'hoodie'),
(2, 'bowler', 'shades', 'suit'),
(3, 'cowboy', 'cateye', 'trenchcoat'),
(4, 'beanie', 'monocle', 'tornshirt'),
(5, 'bucket', 'brokenglasses', 'trenchcoat'),
(6, 'cowboy', 'brokenglasses', 'suit');

insert into WCSTSessions values
(1, 1, 1, 1, 3, 4, 6, 0.75, 850, 0.65, 0.7, 1000, 0.6, 700, default),
(2, 1, 1, 2, 4, 5, 1, 0.73, 870, 0.63, 0.68, 1020, 0.58, 720, default),
(1, 4, 1, 6, 3, 5, 1, 0.74, 860, 0.64, 0.69, 1010, 0.59, 710, default),
(1, 3, 1, 5, 4, 3, 2, 0.72, 880, 0.62, 0.67, 1030, 0.57, 730, default),
(2, 3, 1, 4, 2, 1, 3, 0.76, 840, 0.66, 0.71, 990, 0.61, 690, default);

insert into WCSTruleblocks values
(1, 1, 1, 1, 1, 2, 0.55),
(2, 1, 1, 2, 1, 2, 0.62),
(1, 2, 1, 1, 2, 2, 0.68),
(2, 2, 1, 3, 2, 2, 0.59),
(1, 1, 4, 3, 1, 2, 0.73),
(2, 1, 4, 2, 1, 2, 0.65),
(1, 1, 3, 1, 1, 2, 0.7),
(2, 1, 3, 1, 2, 2, 0.58),
(1, 2, 3, 2, 1, 2, 0.75),
(2, 2, 3, 3, 2, 2, 0.64);

insert into WCSTTrials values
(1, 1, 1, 1, 1, 1, 820, default),
(2, 1, 1, 1, 1, 0, 940, default),
(3, 2, 1, 1, 4, 0, 760, default),
(4, 2, 1, 1, 6, 1, 1050, default),
(1, 1, 1, 2, 2, 1, 890, default),
(2, 1, 1, 2, 4, 0, 980, default),
(3, 2, 1, 2, 1, 0, 770, default),
(4, 2, 1, 2, 1, 1, 1020, default),
(1, 1, 4, 1, 2, 1, 920, default),
(2, 1, 4, 1, 5, 1, 850, default),
(3, 2, 4, 1, 5, 0, 910, default),
(4, 2, 4, 1, 4, 1, 990, default),
(1, 1, 3, 1, 2, 1, 800, default),
(2, 1, 3, 1, 2, 1, 1060, default),
(3, 2, 3, 1, 1, 1, 870, default),
(4, 2, 3, 1, 4, 1, 950, default),
(1, 1, 3, 2, 6, 1, 780, default),
(2, 1, 3, 2, 6, 1, 1000, default),
(3, 2, 3, 2, 5, 0, 930, default),
(4, 2, 3, 2, 3, 0, 850, default);

*/


-- experiment views

create view minigamesinfo as
	select mg.name as Name, ef.name as "trainedEF"
	from minigames mg
	join trainingefs tef on mg.id = tef.mgid
	join executivefunctions ef on tef.efid = ef.id;
	
-- select * from minigamesinfo;

create view psychprofessionals as 
	select name as Name, clinic as Organization, phonenumber as "phonenum"
	from professional;

-- select * from psychprofessionals;

create view psychpros_patients as
	select pro.name as "proname", pro.clinic as Organization, par.id as "parid", par.name as "parname"
	from professional pro
	join protopatient ptp on pro.id = ptp.proid
	join participants par on ptp.parid  = par.id
	order by pro.name;

-- select * from psychpros_patients;

create view generalCBTTprogress as
	select par.id as "parid", sessioncount as "sessionscompleted", currentlevel, completedoflevel, updated as "lastupdated"
	from cbttprogress cbttp
	join participants par on par.id = cbttp.parid
	order by par.id;

-- select * from generalCBTTprogress;

create view CBTTsessionperformance as
	select par.id as "parid", cs.sessionnum, cs.sessionlength, cs.correctcount as "trialscorrect", cs.longestsequence "longestcorrectsequence", cs.currentlevel as "level", cs.whencompleted
	from cbttsessions cs
	join participants par on par.id = cs.parid
	order by par.id, cs.sessionnum;

-- select * from CBTTsessionperformance;

create view CBTTtrialperformance as
	select par.id as "parid", ct.sessionnum, ct.trialnum, st.name as "sequencetype", ct.sequencelength, ct.score, ct.whencompleted
	from cbtttrials ct
	join sequencetypes st on st.id = ct.stid
	join participants par on par.id = ct.parid
	order by par.id, ct.sessionnum, ct.trialnum;

-- select * from CBTTtrialperformance;

create view generalStopGoprogress as
	select par.id as "parid", sgp.sessioncount as "sessionscompleted", sgp.currentlevel, sgp.completedoflevel, sgp.updated as "lastupdated"
	from stopgoprogress sgp
	join participants par on par.id = sgp.parid
	order by par.id;

-- select * from generalStopGoprogress;

create view StopGosessionperformance as
	select par.id as "parid", sgs.sessionnum, sgs.sessionlength, sgs.correctcount as "trialscorrect", sgs.currentlevel as "level", sgs.bestRT, sgs.avgGoRT, sgs.probsignalresponse, sgs.stopsignalRT, sgs.whencompleted
	from stopgosessions sgs
	join participants par on par.id = sgs.parid
	order by par.id, sgs.sessionnum;

-- select * from StopGosessionperformance;

create view StopGotrialperformance as
	select par.id as "parid", sgt.sessionnum, sgt.trialnum, sgtt.name as "trialtype", sgt.startinterval, sgt.goRT, sgt.stopRT, sgt.stopsignaldelaytime, sgt.ifsuccessful, sgt.whencompleted
	from stopgotrials sgt
	join participants par on par.id = sgt.parid
	join stopgotrialtypes sgtt on sgtt.id = sgt.sgttid
	order by par.id, sgt.sessionnum, sgt.trialnum;

-- select * from StopGotrialperformance;

create view generalWCSTprogress as
	select par.id as "parid", wp.sessioncount as "sessionscompleted", wp.currentlevel, wp.completedoflevel, wp.updated as "lastupdated"
	from wcstprogress wp
	join participants par on wp.parid = par.id
	order by par.id;

-- select * from generalWCSTprogress;

create view WCSTsessionperformance as
	select par.id as "parid", ws.sessionnum , ws.phaselength, ws.bestRT, ws.p1accuracyrate, ws.p1avgRT, ws.p1adaptionrate, ws.p2accuracyrate, ws.p2avgRT, ws.p2adaptionrate, ws.whencompleted
	from wcstsessions ws
	join participants par on par.id = ws.parid
	order by par.id, ws.sessionnum;

-- select * from WCSTsessionperformance;

create view WCSTruleblockperformance as
	select par.id as "parid", wr.sessionnum, wr.ruleblocknum, rt.name as "ruletype", wr.phase as "phasenum", wr.blocklength, wr.adaptionrate
	from wcstruleblocks wr
	join participants par on par.id = wr.parid
	join wcstruletypes rt on rt.id = wr.rid
	order by par.id, wr.sessionnum, wr.ruleblocknum;

-- select * from WCSTruleblockperformance;

create view WCSTtrialperformance as 
	select par.id as "parid", wt.sessionnum, wt.rnum as "ruleblocknum", wt.trialnum, wt.ifsuccessful, wt.RT
	from wcsttrials wt
	join participants par on par.id = wt.parid
	order by par.id, wt.sessionnum, wt.rnum, wt.trialnum;

-- select * from WCSTtrialperformance;



